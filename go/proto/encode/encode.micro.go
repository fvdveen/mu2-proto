// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/encode/encode.proto

/*
Package encode is a generated protocol buffer package.

It is generated from these files:
	proto/encode/encode.proto

It has these top-level messages:
	Error
	EncodeRequest
	EncodeResponse
*/
package encode

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EncodeService service

type EncodeService interface {
	Encode(ctx context.Context, in *EncodeRequest, opts ...client.CallOption) (EncodeService_EncodeService, error)
}

type encodeService struct {
	c    client.Client
	name string
}

func NewEncodeService(name string, c client.Client) EncodeService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "encodeservice"
	}
	return &encodeService{
		c:    c,
		name: name,
	}
}

func (c *encodeService) Encode(ctx context.Context, in *EncodeRequest, opts ...client.CallOption) (EncodeService_EncodeService, error) {
	req := c.c.NewRequest(c.name, "EncodeService.Encode", &EncodeRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &encodeServiceEncode{stream}, nil
}

type EncodeService_EncodeService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*EncodeResponse, error)
}

type encodeServiceEncode struct {
	stream client.Stream
}

func (x *encodeServiceEncode) Close() error {
	return x.stream.Close()
}

func (x *encodeServiceEncode) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *encodeServiceEncode) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *encodeServiceEncode) Recv() (*EncodeResponse, error) {
	m := new(EncodeResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EncodeService service

type EncodeServiceHandler interface {
	Encode(context.Context, *EncodeRequest, EncodeService_EncodeStream) error
}

func RegisterEncodeServiceHandler(s server.Server, hdlr EncodeServiceHandler, opts ...server.HandlerOption) error {
	type encodeService interface {
		Encode(ctx context.Context, stream server.Stream) error
	}
	type EncodeService struct {
		encodeService
	}
	h := &encodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EncodeService{h}, opts...))
}

type encodeServiceHandler struct {
	EncodeServiceHandler
}

func (h *encodeServiceHandler) Encode(ctx context.Context, stream server.Stream) error {
	m := new(EncodeRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.EncodeServiceHandler.Encode(ctx, m, &encodeServiceEncodeStream{stream})
}

type EncodeService_EncodeStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*EncodeResponse) error
}

type encodeServiceEncodeStream struct {
	stream server.Stream
}

func (x *encodeServiceEncodeStream) Close() error {
	return x.stream.Close()
}

func (x *encodeServiceEncodeStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *encodeServiceEncodeStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *encodeServiceEncodeStream) Send(m *EncodeResponse) error {
	return x.stream.Send(m)
}
